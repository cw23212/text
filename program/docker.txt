***docker***

run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
	-d	detached mode 흔히 말하는 백그라운드 모드
	-p	호스트와 컨테이너의 포트를 연결 (포워딩)
	-v	호스트와 컨테이너의 디렉토리를 연결 (마운트)
	-e	컨테이너 내에서 사용할 환경변수 설정
	–name	컨테이너 이름 설정
	–rm	프로세스 종료시 컨테이너 자동 제거
	-it	-i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션
	–link	컨테이너 연결 [컨테이너명:별칭]
create </ 컨테이너 생성만>
ps [OPTIONS]
	-a
stop [OPTIONS] CONTAINER [CONTAINER...]
rm [OPTIONS] CONTAINER [CONTAINER...]
image
	ls
	tag <image> IMAGE[:TAG|@DIGEST]
images [OPTIONS] [REPOSITORY[:TAG]]
pull [OPTIONS] NAME[:TAG|@DIGEST]
rmi [OPTIONS] IMAGE [IMAGE...]
logs [OPTIONS] CONTAINER
exec [OPTIONS] CONTAINER COMMAND [ARG...]
	-it
build [OPTIONS] PATH | URL | -
restart [OPTIONS] CONTAINER [CONTAINER...]
login
push [OPTIONS] NAME[:TAG] </ <Docker Hub 사용자 계정>/<이미지 이름>:<태그> 형식으로 이미지 빌드 >
commit [options] <container name> [image name[:tag name]] </ container -> image>
rename <container> <new_name>

**dockerfile
FROM <image>:<tag>
MAINTAINER <name>  </관리자 이름 또는 이메일>
COPY <src> <dest> </ 파일 디렉토리 복사
ADD <src> <dest> </ URL입력 가능, 압축 파일 해제>
RUN <command>
RUN [command,parm1...]
CMD command param1 param2 </ 컨테이너 실행시, 마지막 cmd만>
WORKDIR <PATH>
EXPOSE <port> [<port>...]
VOLUME ["/data"]
ENV <key> <value>
ENV <key>=<value> ...

**docker-compose
up
	-d 
	--force-recreate
	--build


**docker-compose.yml
version: '2/2.1/3...'
services:
 services_Name1:
  image: image_Name
  volumes:
   - local:virtual
  environment: 
   -
  healthcheck:
   test: ""
   interval:
   timeout:
   retries:
  depends_on:
   - services_name
 services_Name2:
  build:
   context: #docker build 실행할 디렉토리
   dockerfile: file_Path
  ports:
   - local:virtual
  depends_on:
   services_name:
    condition: service_started/service_healthy
  links:
   - services_name
  command: 
  
   



**install
https://docs.docker.com/engine/install/
#debian
apt-get update
apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io

**image
docker.io/library/<image>:<tag>

**example
RUN apt-get update && apt-get install -y --no-install-recommends \
	package...
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
	
RUN pip3 --no-cache-dir install \
	package...