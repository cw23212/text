**CPP**
<meta>
-기본 자료형
int,char,double,bool,auto..
int*,char*..
Type Name[=Var];
대소문자 구분

--타입변화
(type)var
-줄 구분
;
-주석
--한줄
//
--블록
/*...[//]?*/
--연산자
+-*/,++,&,&&,+=
?:,sizeof,::,typeid

-변수(정적)
const </des 상수>
static 	</des 정적>
unsigned,register
char,int,short,long,long long
float,double, long double
*,&
const type* name --변수 상수화
type* const name --포인터 상수화
type (*name)(par..); --함수 포인터
extern

-배열
type Name[] [ ={} ]?

-구문
using Namespace Name;
using Namespace::Nmae;
type * p=new Type
delete p
struct Name{};
enum Name{}
typedef type name
usnig name=type
auto
inline

-객체
class name{
type name;
public:
type name;
type name(){};
public:
	name(){} </des 생성자>
	~name(){}  </des 소멸자, 파생클래스 일 경우 가상함수>
}
type classname::name(){};
--선언
classname Name;
--접근
classname.mem
--상속 	</des 생성자 필수,파생클래스 >
class Name : [access=private] classname{
public:
	Nmae() : classname(){}
}
-함수(오버라이딩)
Instance.baseClass::method() </des 오버라이딩된 상속 함수 호출>
--가상함수
virtual type Name(){}
--수수 가상 함수, 추상클래스
virtual type name()=0;

-구조체
struct name{};
--접근
structN.mem

-제어문
if()
else if()
else
switch(){case:}
while()
do{}while();
continue,break
for(;;){}
for(i : arr){}

-함수 (오버로딩)
type Name(par,defa=default){}
type Name const(){} </des 멤버 읽기 전용>
inline type Name(){}
--전방 선언
type Name();
class name;

-연산자 오버로딩
type operator연산자(){ return }
-프렌트
friend type functionName(par..);
friend class classname
friend type functionName();

-템플릿
template <typename Name = defaulttype,type Name...> type Name(){}
template <typename Name> class Nmae{}
--명시적 특수화
template <> type Name(){};

-컨테이너
--시퀀스
vetctor, deque, list, forward_list
--associate
set,multiset,map,multimap
--어댑터
stack,queue,priority_queue

-access
private - 선언한 클래스 내에서만
public - 공개
default - 같은 패키지의 클래스, 자식 
protected 같은 패키지의 클래스, 자식 + 다른 패키지 자식

-상수
NULL
--stdo
std::cout<<;
</meta>

<class>

</class>
<headaer>
##vetctor
##list
##deque
##functional 
</headaer>
