**SEHLL PROGRAMING**
<meta>
-기본 자료형
문자열
-줄 구분
\n
-주석
--한줄
#
--블록
:<<'END'
END

-옵션
"-x" 디버깅
set -x
...
set +x
</meta>
$[],expr	-연산
' '	-특수문자제거
" "	-$,`,\,! 제외
` `.$()	-명령 대체
&& 성공인겨우
|| 실패인 경우

-변수 대응법
$name,${name}
${name:=value}	-$name이 null이면 value 할당,반환
${name:+value}	-$name이 !null이면 value 반환
${name:-value}	-$name이 null이면 value 반환
${name:?value}	-$name이 null이면 value 반환,error
${#name}		-$name 길이 반환
${#name}		-$name 길이 반환
${name:offset(:legth)}	-offset만큼 삭제 (lenth만큼 출력)

-패턴비교
${변수#패턴}	-시작 부분 부터 게으른 패턴부분 제외
${변수##패턴}	-시작 부분 부터 탐욕적인 패턴부분 제외
${변수%패턴}	-끝 부분 부터 게으른 패턴부분 제외
${변수%%패턴}	-끝 부분 부터 탐욕적인 패턴부분 제외
-속성 변수
$0	-셸 스크립트
$n	-스크립트에 넘겨진 n번째 인자
$#	-인자 개수
$$	-스크립트 pid
$*,$@	-스크립트 전달된 인자 전체
$?	-실행값이 반환 값, 참 거짓 반환
$-	-옵션들

-표현식
--문자열비교
=~	-정규표현식 비교
[_ep_]
[ string ]	-빈 문자열이 아니면 참
[ string1 = string2 ]	-같으면 참
[ string1 != string2 ]	-다르면 참
[ -n string ]	-null이 아니면 참
[ -z string ]	-null이면 참
[ -a ]	- &&연산과 동일 and 연산
[ -o ]	- ||연산과 동일 xor 연산
--산술비교
[ expr1 -eq expr2 ]	-값이 같으면 참
[ expr1 -ne expr2 ]	-값이 같지 않으면 참
[ expr1 -gt expr2 ]	- '>'
[ expr1 -ge expr2 ]	- '<='
[ expr1 -lt expr2 ]	- '<'
[ expr1 -le expr2 ]	- '<='
[ ! expr ]	-거짓이면 참
[ expr1 -a expr2 ]	- &&
[ expr1 -o expr2 ]	- ||
--파일 조건
[ -{b,c,d, etc..} FILE ]
b	-블록 다비아스
c	-char 디바이스
d	-dir
e	-exist
f	-존재하고 정규파일이면
g	-sgid가 있으면
k	-sticky bit
L	-심볼릭
p	-named pipe
r,x,w,O,G	-권한이 있으면
s	-비어있지 않으면
[ file1 -nt file2 ]	-file1이 file2 보다 최근
[ file1 -ot file2 ]	-file1이 file2 보다 오래된
[ file1 -ef file2 ]	-file1==file2 하드링크

-조건문
--if
if\0[\0조건\0]
then
	실행문장
elfi\0[\0조건\0]
	실행문장
else
	실행문장
fi
--case
case 문자열 in
	패턴) 실행문장;;
	패턴) 실행문장;;
esac
--select
select 변수 in 값1 값2 값3 ..
do
	실행문장
done
-for
for 변수 in 값1 값2 ..
do
	실행문장
done
--while
while [ 조건문 ]
do
	실행문장
done
--until
until [ 조건문 ]
do
	실행문장
done
-함수
함수이름()
{
	실행문장
}
function 함수이름()
{
	echo
	실행문장
	exit
}

