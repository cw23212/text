**git**

init
status 
	-s	</short>
	--ignored
diff </ staged <> working >
	--stage,cached </ commit <> staged >
	--ours,--theirs,--base
commit
	-v </ diff 내용 추가>
	-m </ message >
	-a </ add .>
	--amend </ 전 커밋 덮어쓰기>
log [hash/expr]</commit log $ git log --graph --all --oneline >
	-p,--patch </ diff 출력>
	-N
	-stat
	--pretty=[oneline|short|full|fuller]|[format:"%[h|an|ar|s]"]
	--graph
	--since,before=
	--grep
	-S "" </ 특정 텍스트 포함 커밋>
	-L :Function:File </ 파일의 함수의 로그>
	expr - master..Branch </ master에는 없고 Branch에 있는 커밋>
		- master1 master2 ^Branch1 --not Branch2
		- master1...branch </ master,branch 둘다에 없는 커밋>
rm </ staged file>
	-f
	--cached
mv
reset [SHA] [file(path)]?
	--soft </ index,working directory 그대로, only head 리셋>
	--mixed </ working directory만 그대로, head and index 리셋, default>
	--hard </ 전부 리셋>
revert
remote </ 원격 저장소 확인>
	-v </url>
	add 단축이름 Url
	show 단축이름
	rename 1 2
	remove(rm)
fetch [단축이름]
	--all 
stash </default save>
	save
		--patch
	list
	apply
		--index
	drop
	branch
push 원격저장소 브랜치[:원격브랜치]
	--tags 태그 푸시
	--delete 원격 저장소 삭제
checkout 브랜치 [file(path)]?
	-b Name 브랜치 새로 생성
	--track 트래킹 브랜치 
	--conflict=diff3 File </our,theirs,base 충돌 부분으로 파일 표시>
branch Name
	-d 삭제
	-D 강제 삭제
	-v 마지막 커밋 메시지
	--merged
	-vv 트래킹 학인
	--set-upstream-to origin/Branch </remote 연동>
clone Url
	-o 서버 remote 이름 지정
merge TopicBranch
	-Xours,-Xtheirs </ Recursive merge 전략>
	-s [ours|theirs] </
	--abort </충돌 해소 취소>
	-Xignore-all-space,-Xignore-space-change
rebase BaseBranchh [TopicBranch]
tag [Tag] </lightweight 커밋 체크섬 저장>
	-a Tag [체크섬] </Annotated 태그>
	-l 와일드 카드 포함 검색
show [해시값/HEAD[^*][~N]]</ 커밋 정보 확인, ^* - 이전 커밋,~N - N 이전 커밋  >
	[:N:file] </merge 중 1=공통 조상 파일, 2=현재 개발자의 파일, 3=merge_head 파일
	Tag </ tag 기준으로>
	
restore File </ working -> stage>
	--staged	</ stage -> commit>
config	ConfigName Value </user.name,user.email,color.diff>
	--list
	--show-origin
	--system
	--global
	--local </default>
	--unset
	</ ConfigName - alias.AliasName >
clean </ untracked 모든 파일 삭제>
	-n 가상 실행
grep </ 파일 내의 문자>
bundle
	create FileName refs
	verify
bisect
	start
	bad
	good
	run Script </ 정상 0, 문제 1 반환 스크립트>
blame File</ 줄 별로 커밋 로그 확인>
	-L Start,End </ 줄>
cat-file </ 스냅샷 확인>
ls-files </파일 확인>
	--cached,--modified,--ignored
merge-file

-file
-- .gitignore
슬래시(/)로 시작하면 하위 디렉토리에 적용되지(Recursivity) 않는다.
디렉토리는 슬래시(/)를 끝에 사용하는 것으로 표현한다.
느낌표(!)로 시작하는 패턴의 파일은 무시하지 않는다.
glob 패턴
-- .gitconfig
[alias]
	co=checkout
	br=branch
	st=status
	ss=status -s
	ca=commit -a -m
	lg=log --graph --all --oneline
	cso=config -l --show-origin
[core]
	eol=[native,crlf,lf]
	autocrlf=[true,input,false] </ [commit,checkout] - [crlf->lf,lf->clf],[crlf->lf,lf->lf],[n,n]>
[merge]
	conflictstyle=[diff1,diff2,diff3]
[credential]
	helper=[cache]
[filter "indent"]
	clean=ProgramName </stage 할때>
	smudge=ProgramName </ checkout 할 때>
	
--.gitattributes
fileExpr binary
fileExpr diff=word </docx2txt 설치>
fileExpr diff=exif </ 이미지 파일>
fileExpr filter=indent